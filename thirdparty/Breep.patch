diff --git a/include/breep/network/detail/impl/utils.tcc b/include/breep/network/detail/impl/utils.tcc
index aec30e0..65f09af 100644
--- a/include/breep/network/detail/impl/utils.tcc
+++ b/include/breep/network/detail/impl/utils.tcc
@@ -10,7 +10,8 @@

 #include <cstdint>
 #include <utility>
-#include <boost/detail/endian.hpp>
+#include <boost/endian.hpp>
+#include <boost/predef.h>

 /**
  * @file utils.tcc
@@ -24,7 +25,7 @@ inline void breep::detail::little_endian(const Container& container, OutputItera
 	static_assert(sizeof(typename Container::value_type) == 1, "Invalid container type.");
 	static_assert(sizeof(typename OutputIterator::container_type::value_type) == 1, "Invalid container type.");

-#ifdef BOOST_BIG_ENDIAN
+#if BOOST_ENDIAN_BIG_BYTE
 	#ifndef BREEP_NOWARNING
 		#ifdef _MSC_VER
 			#pragma message ("This library has not been tested for big endian architectures, and is probably not working on such device. Feedback is very welcome.")
@@ -49,10 +50,10 @@ inline void breep::detail::little_endian(const Container& container, OutputItera
 			*out++ = data[max + i];
 		}
 	}
-#elif defined BOOST_LITTLE_ENDIAN
+#elif BOOST_ENDIAN_LITTLE_BYTE
 	std::copy(container.cbegin(), container.cend(), outputIterator);
 #else
 #error "Unknown endianness (if endianness is known, please manually define BOOST_LITTLE_ENDIAN or BOOST_BIG_ENDIAN)."
 #error "Middle endian is not supported."
 #endif
-}
\ No newline at end of file
+}
